package jump61;

import java.io.Reader;
import java.io.Writer;
import java.io.PrintWriter;

import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;

import static jump61.Color.*;
import static jump61.GameException.error;

/** Main logic for playing (a) game(s) of Jump61.
 *  @author Derrick Mar
 */
class Game {

    /** Name of resource containing help message. */
    private static final String HELP = "jump61/Help.txt";

    /** A new Game that takes command/move input from INPUT, prints
     *  normal output on OUTPUT, prints prompts for input on PROMPTS,
     *  and prints error messages on ERROROUTPUT. The Game now "owns"
     *  INPUT, PROMPTS, OUTPUT, and ERROROUTPUT, and is responsible for
     *  closing them when its play method returns. */
    Game(Reader input, Writer prompts, Writer output, Writer errorOutput) {
        _board = new MutableBoard(Defaults.BOARD_SIZE);
        _readonlyBoard = new ConstantBoard(_board);
        _prompter = new PrintWriter(prompts, true);
        _inp = new Scanner(input);
        _inp.useDelimiter("(?m)$|^|\\p{Blank}+");
        _out = new PrintWriter(output, true);
        _err = new PrintWriter(errorOutput, true);

        playerRed = new HumanPlayer(this, Color.RED);
        playerBlue = new AI(this, Color.BLUE);
        _playing = false;
        size = Defaults.BOARD_SIZE;
        // FIXME?
    }

    /** Returns a readonly view of the game board.  This board remains valid
     *  throughout the session. */
    Board getBoard() {
        return _readonlyBoard;
    }

    Board getMutableBoard() {
        return _board;
    }

    /** Play a session of Jump61.  This may include multiple games,
     *  and proceeds until the user exits.  Returns an exit code: 0 is
     *  normal; any positive quantity indicates an error.  */
    int play() {
        _out.println("Welcome to " + Defaults.VERSION);
        _out.flush();
        while (promptForNext()) {
            readExecuteCommand();
        }
        return 0;
    }

    boolean isOdd(int num) {
        return num % 2 == 1;
    }

    void aiMove() {
        while (_playing) {
            if (isOdd(_board.getMove())
                && playerRed instanceof AI) {
                System.out.println("AI red making move in Game");
                playerRed.makeMove();
                _board.addMove(1);
                checkForWin();
            } else if (!isOdd(_board.getMove())
                       && playerBlue instanceof AI) {
                System.out.println("move is: " + _board.getMove());
                System.out.println("AI blue making move in Game");
                playerBlue.makeMove();
                _board.addMove(1);
                checkForWin();
            } else {
                System.out.println("in AI move move is: " + _board.getMove());
                return;
            }
        }
    }

    /** Add a spot to R C, if legal to do so. */
    void makeMove(int r, int c) {
        if (_playing) {
            if (_board.exists(r - 1, c - 1)) {
                if (isOdd(_board.getMove())) {
                    System.out.println("red making move in Game");
                    playerRed.makeMove(r - 1, c - 1);
                    _board.addMove(1);
                    checkForWin();
                } else {
                    System.out.println("blue making move in Game");
                    playerBlue.makeMove(r - 1, c - 1);
                    _board.addMove(1);
                    checkForWin();
                }
            } else {
                reportError("move %d %d out of bounds", r, c);
            }
        } else {
            reportError("no game in progress");
        }
    }

    /** Add a spot to square #N, if legal to do so. */
    void makeMove(int n) {
        // FIXME
    }

    /** Return a random integer in the range [0 .. N), uniformly
     *  distributed.  Requires N > 0. */
    int randInt(int n) {
        return _random.nextInt(n);
    }

    /** Send a message to the user as determined by FORMAT and ARGS, which
     *  are interpreted as for String.format or PrintWriter.printf. */
    void message(String format, Object... args) {
        _out.printf(format, args);
    }

    /** Check whether we are playing and there is an unannounced
     *  winner.
     *  If so, announce and stop play. */
    private void checkForWin() {
        if (_board.checkForWin()) {
            announceWinner();
        }
        return;
        }

    /** Send announcement of winner to my user output. */
    private void announceWinner() {
        if (_board.announceWinner() == Color.RED) {
            _out.println("Red wins.");
        } else {
            _out.println("Blue wins.");
        }
        dump();
        restartGame();
    }


    /** Make PLAYER an AI for subsequent moves. */
    private void setAuto(Color player) {
        if (player == Color.RED) {
            playerRed = new AI(this, Color.RED);
        } else {
            playerBlue = new AI(this, Color.BLUE);
        }
    }

    /** Make PLAYER take manual input from the user for subsequent moves. */
    private void setManual(Color player) {
        if (player == Color.RED) {
            System.out.println("in setManual move is: " + _board.getMove());
            System.out.println("Changing redPlayer to manual in Game");
            playerRed = new HumanPlayer(this, Color.RED);
        } else {
            System.out.println("Changing bluePlayer to manual in Game");
            playerBlue = new HumanPlayer(this, Color.BLUE);
        }
    }

    /** Stop any current game and clear the board to its initial
     *  state. */
    private void clear() {
         System.out.println("in clear move is: " + _board.getMove());
        _playing = false;
        _board.clear(size);
        System.out.println("in clear move is: " + _board.getMove());
    }

    /** Print the current board using standard board-dump format. */
    private void dump() {
        System.out.println("dump is called in game");
        System.out.println("in dump move is: " + _board.getMove());
        _out.println(_board.constructDump());
        _out.flush();
    }

    /** Print a help message. */
    private void help() {
        Main.printHelpResource(HELP, _out);
    }

    /** Stop any current game and set the move number to N. */
    private void setMoveNumber(int n) {
        _board.setMoves(n);
        _playing = false;
    }

    /** Seed the random-number generator with SEED. */
    private void setSeed(long seed) {
        _random.setSeed(seed);
    }

    /** Place SPOTS spots on square R:C and color the square red or
     *  blue depending on whether COLOR is "r" or "b".  If SPOTS is
     *  0, clears the square, ignoring COLOR.  SPOTS must be less than
     *  the number of neighbors of square R, C. */
    private void setSpots(int r, int c, int spots, String color) {
        if (!_board.exists(r, c)) {
            throw error("move %d %d out of bounds", r, c);
        } else if (color.equals("r")) {
            _board.set(r, c, spots, Color.RED);
        } else if (color.equals("b")) {
            _board.set(r, c, spots, Color.BLUE);
        } else if (spots == 0) {
            _board.set(r, c, spots, Color.WHITE);
        } else {
            throw error("Error: syntax error in 'set' command");
        }
    }

    /** Stop any current game and set the board to an empty N x N board
     *  with numMoves() == 0.  */
    private void setSize(int n) {
        _playing = false;
        size = n;
        _board.clear(n);
    }

    /** Begin accepting moves for game.  If the game is won,
     *  immediately print a win message and end the game. */
    private void restartGame() {
        clear();
        System.out.println("in restart game move is: " + _board.getMove());
    }

    /** Save move R C in _move.  Error if R and C do not indicate an
     *  existing square on the current board. */
    private void saveMove(int r, int c) {
        if (!_board.exists(r, c)) {
            throw error("move %d %d out of bounds", r, c);
        }
        _move[0] = r;
        _move[1] = c;
    }

    /** Returns a color (player) name from _inp: either RED or BLUE.
     *  Throws an exception if not present. */
    private Color readColor() {
        return Color.parseColor(_inp.next("[rR][eE][dD]|[Bb][Ll][Uu][Ee]"));
    }

    private void readColor(String str) {
        boolean matches = str.matches("[rR][eE][dD]|[Bb][Ll][Uu][Ee]");
        if (matches) {
            return;
        } else {
            throw new GameSyntaxException();
        }
    }

    private void readColorForSet(String str) {
        boolean matches = str.matches("[b]|[r]");
        if (matches) {
            return;
        } else {
            throw new GameSyntaxException();
        }
    }

    /** Read and execute one command.  Leave the input at the start of
     *  a line, if there is more input. */
    private void readExecuteCommand() {
        String cmnd = _inp.nextLine();
        executeCommand(cmnd);
    }

    /** Gather arguments and execute command CMND.  Throws GameException
     *  on errors. */
    private void executeCommand(String cmnd) {
        System.out.println("executing command in Game");
        System.out.println("in executecommand move is: " + _board.getMove());
        String[] line = cmnd.split("\\p{Blank}+");
        if (line[0].equals("")) {
            line = Arrays.copyOfRange(line, 1, line.length);
        }
        String firstcommand = line[0];
        try {
            if (isInteger(firstcommand)) {
                if (isInteger(line[1])) {
                    makeMove(Integer.parseInt(firstcommand),
                             Integer.parseInt(line[1]));
                } else {
                    throw new GameSyntaxException();
                }
            } else {
                switch (firstcommand) {
                case "": break;
                case "clear": clear();
                    break;
                case "start": start();
                    break;
                case "quit": System.exit(0);
                    break;
                case "auto":
                    readColor(line[1]);
                    setAuto(Color.parseColor(line[1]));
                    break;
                case "manual":
                    readColor(line[1]);
                    setManual(Color.parseColor(line[1]));
                    break;
                case "size":
                    try {
                        setSize(Integer.parseInt(line[1]));
                    } catch (NumberFormatException e) {
                        throw new GameSyntaxException();
                    }
                    break;
                case "move":
                    setMoveNumber(Integer.parseInt(line[1]));
                    break;
                case "set":
                    try {
                        if (Integer.parseInt(line[3]) != 0) {
                            readColorForSet(line[4]);
                            System.out.println("got here");
                        } else {
                            line[4] = "WHITE";
                        }
                        _board.set(Integer.parseInt(line[1]) - 1,
                                   Integer.parseInt(line[2]) - 1,
                                   Integer.parseInt(line[3]),
                                   Color.parseColor(line[4])
                                   );
                        _playing = false;
                    } catch (NumberFormatException e) {
                        throw new GameSyntaxException();
                    }
                    break;
                case "dump": System.out.println("got to dump in switch");
                    dump();
                    break;
                case "help":
                    help();
                    _out.flush();
                    break;
                case "\n": case "\r\n":
                    return;
                case "#": break;
                default:
                    throw new GameException();
                }
            }
        } catch (IndexOutOfBoundsException e) {
            reportError("not enough arguments");
        } catch (GameSyntaxException e) {
            if (isInteger(firstcommand)) {
                reportError("syntax error in 'move' command");
            } else {
                reportError("syntax error in '%s' command",
                            firstcommand);
            }
        } catch (GameException e) {
            reportError("invalid first command");
        }
    }


        public void start() {
            System.out.println("Starting game");
            _playing = true;
        }

    // this is my way for is Positive integer
    public static boolean isPosInteger(String str)
    {
        return str.matches("^\\d+$");
    }

    public static boolean isInteger(String str)
    {
        return str.matches("^-?\\d+$");
    }


    /** Print a prompt and wait for input. Returns true iff there is another
     *  token. */
    private boolean promptForNext() {
        System.out.println("in prompfornext  move is: " + _board.getMove());
        aiMove();
        if (_playing) {
            if (isOdd(_board.getMove())) {
                _out.print("red> ");
            } else {
                _out.print("blue> ");
            }
        } else {
            _out.print("> ");
        }
        _out.flush();
        if (_inp.hasNextLine()) {
            return true;
        }
        return false;
    }

    /** Send an error message to the user formed from arguments FORMAT
     *  and ARGS, whose meanings are as for printf. */
    void reportError(String format, Object... args) {
        _err.print("Error: ");
        _err.printf(format, args);
        _err.println();
    }

    /** Writer on which to print prompts for input. */
    private final PrintWriter _prompter;
    /** Scanner from current game input.  Initialized to return
     *  newlines as tokens. */
    private final Scanner _inp;
    /** Outlet for responses to the user. */
    private final PrintWriter _out;
    /** Outlet for error responses to the user. */
    private final PrintWriter _err;

    /** The board on which I record all moves. */
    private final Board _board;
    /** A readonly view of _board. */
    private final Board _readonlyBoard;

    /** A pseudo-random number generator used by players as needed. */
    private final Random _random = new Random();

    /** True iff a game is currently in progress. */
    private boolean _playing;

    // my instance variables
    private int size;
    private Player playerRed;
    private Player playerBlue;
    // FIXME

   /** Used to return a move entered from the console.  Allocated
     *  here to avoid allocations. */
    private final int[] _move = new int[2];
}
